/*
* generated by Xtext
*/
package org.lunifera.metamodel.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.lunifera.metamodel.dsl.services.SqlDSLGrammarAccess;

public class SqlDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private SqlDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.lunifera.metamodel.dsl.ui.contentassist.antlr.internal.InternalSqlDSLParser createParser() {
		org.lunifera.metamodel.dsl.ui.contentassist.antlr.internal.InternalSqlDSLParser result = new org.lunifera.metamodel.dsl.ui.contentassist.antlr.internal.InternalSqlDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSArtifactAccess().getAlternatives(), "rule__SArtifact__Alternatives");
					put(grammarAccess.getSTableMemberAccess().getAlternatives(), "rule__STableMember__Alternatives");
					put(grammarAccess.getSColumnAccess().getAlternatives_2(), "rule__SColumn__Alternatives_2");
					put(grammarAccess.getSInlinedSQLTypeAccess().getAlternatives(), "rule__SInlinedSQLType__Alternatives");
					put(grammarAccess.getSDBEngineAccess().getAlternatives(), "rule__SDBEngine__Alternatives");
					put(grammarAccess.getSSimpleTypesAccess().getAlternatives(), "rule__SSimpleTypes__Alternatives");
					put(grammarAccess.getSIndexAccess().getAlternatives(), "rule__SIndex__Alternatives");
					put(grammarAccess.getSModelAccess().getGroup(), "rule__SModel__Group__0");
					put(grammarAccess.getSModelAccess().getGroup_0(), "rule__SModel__Group_0__0");
					put(grammarAccess.getSSettingsAccess().getGroup(), "rule__SSettings__Group__0");
					put(grammarAccess.getSSettingsAccess().getGroup_2_0(), "rule__SSettings__Group_2_0__0");
					put(grammarAccess.getSSettingsAccess().getGroup_2_1(), "rule__SSettings__Group_2_1__0");
					put(grammarAccess.getSSettingsAccess().getGroup_2_2(), "rule__SSettings__Group_2_2__0");
					put(grammarAccess.getSTableAccess().getGroup(), "rule__STable__Group__0");
					put(grammarAccess.getSTableAccess().getGroup_3_1(), "rule__STable__Group_3_1__0");
					put(grammarAccess.getSTableAccess().getGroup_3_3(), "rule__STable__Group_3_3__0");
					put(grammarAccess.getSColumnAccess().getGroup(), "rule__SColumn__Group__0");
					put(grammarAccess.getSJoinColumnAccess().getGroup(), "rule__SJoinColumn__Group__0");
					put(grammarAccess.getSColumnPropsAccess().getGroup(), "rule__SColumnProps__Group__0");
					put(grammarAccess.getSColumnPropsAccess().getGroup_2_2(), "rule__SColumnProps__Group_2_2__0");
					put(grammarAccess.getSColumnPropsAccess().getGroup_2_3(), "rule__SColumnProps__Group_2_3__0");
					put(grammarAccess.getSEnumAccess().getGroup(), "rule__SEnum__Group__0");
					put(grammarAccess.getSEnumLiteralAccess().getGroup(), "rule__SEnumLiteral__Group__0");
					put(grammarAccess.getSStringAccess().getGroup(), "rule__SString__Group__0");
					put(grammarAccess.getSDecimalAccess().getGroup(), "rule__SDecimal__Group__0");
					put(grammarAccess.getLFQNAccess().getGroup(), "rule__LFQN__Group__0");
					put(grammarAccess.getLFQNAccess().getGroup_1(), "rule__LFQN__Group_1__0");
					put(grammarAccess.getSModelAccess().getGeneratedFileAssignment_0_1(), "rule__SModel__GeneratedFileAssignment_0_1");
					put(grammarAccess.getSModelAccess().getSettingsAssignment_1(), "rule__SModel__SettingsAssignment_1");
					put(grammarAccess.getSModelAccess().getArtifactAssignment_2(), "rule__SModel__ArtifactAssignment_2");
					put(grammarAccess.getSSettingsAccess().getSchemaAssignment_2_0_1(), "rule__SSettings__SchemaAssignment_2_0_1");
					put(grammarAccess.getSSettingsAccess().getJavapackageAssignment_2_1_1(), "rule__SSettings__JavapackageAssignment_2_1_1");
					put(grammarAccess.getSSettingsAccess().getEngineAssignment_2_2_1(), "rule__SSettings__EngineAssignment_2_2_1");
					put(grammarAccess.getSTableAccess().getNameAssignment_1(), "rule__STable__NameAssignment_1");
					put(grammarAccess.getSTableAccess().getSettingsAssignment_3_0(), "rule__STable__SettingsAssignment_3_0");
					put(grammarAccess.getSTableAccess().getEntitynameAssignment_3_1_1(), "rule__STable__EntitynameAssignment_3_1_1");
					put(grammarAccess.getSTableAccess().getCachedAssignment_3_2(), "rule__STable__CachedAssignment_3_2");
					put(grammarAccess.getSTableAccess().getPrefixAssignment_3_3_1(), "rule__STable__PrefixAssignment_3_3_1");
					put(grammarAccess.getSTableAccess().getColumnsAssignment_4(), "rule__STable__ColumnsAssignment_4");
					put(grammarAccess.getSColumnAccess().getNameAssignment_1(), "rule__SColumn__NameAssignment_1");
					put(grammarAccess.getSColumnAccess().getExtTypeAssignment_2_0(), "rule__SColumn__ExtTypeAssignment_2_0");
					put(grammarAccess.getSColumnAccess().getInlinedTypeAssignment_2_1(), "rule__SColumn__InlinedTypeAssignment_2_1");
					put(grammarAccess.getSColumnAccess().getSimpleTypeAssignment_2_2(), "rule__SColumn__SimpleTypeAssignment_2_2");
					put(grammarAccess.getSColumnAccess().getPropsAssignment_3(), "rule__SColumn__PropsAssignment_3");
					put(grammarAccess.getSJoinColumnAccess().getNameAssignment_1(), "rule__SJoinColumn__NameAssignment_1");
					put(grammarAccess.getSJoinColumnAccess().getReferencedTypeAssignment_2(), "rule__SJoinColumn__ReferencedTypeAssignment_2");
					put(grammarAccess.getSJoinColumnAccess().getPropsAssignment_3(), "rule__SJoinColumn__PropsAssignment_3");
					put(grammarAccess.getSColumnPropsAccess().getNullableAssignment_2_0(), "rule__SColumnProps__NullableAssignment_2_0");
					put(grammarAccess.getSColumnPropsAccess().getAesAssignment_2_1(), "rule__SColumnProps__AesAssignment_2_1");
					put(grammarAccess.getSColumnPropsAccess().getIndexAssignment_2_2_1(), "rule__SColumnProps__IndexAssignment_2_2_1");
					put(grammarAccess.getSColumnPropsAccess().getJavacolumnAssignment_2_3_1(), "rule__SColumnProps__JavacolumnAssignment_2_3_1");
					put(grammarAccess.getSEnumAccess().getNameAssignment_1(), "rule__SEnum__NameAssignment_1");
					put(grammarAccess.getSEnumAccess().getLiteralsAssignment_3(), "rule__SEnum__LiteralsAssignment_3");
					put(grammarAccess.getSEnumLiteralAccess().getNameAssignment_0(), "rule__SEnumLiteral__NameAssignment_0");
					put(grammarAccess.getSEnumLiteralAccess().getValueAssignment_2(), "rule__SEnumLiteral__ValueAssignment_2");
					put(grammarAccess.getSStringAccess().getValueAssignment_1(), "rule__SString__ValueAssignment_1");
					put(grammarAccess.getSDecimalAccess().getValueAssignment_1(), "rule__SDecimal__ValueAssignment_1");
					put(grammarAccess.getSSettingsAccess().getUnorderedGroup_2(), "rule__SSettings__UnorderedGroup_2");
					put(grammarAccess.getSTableAccess().getUnorderedGroup_3(), "rule__STable__UnorderedGroup_3");
					put(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2(), "rule__SColumnProps__UnorderedGroup_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.lunifera.metamodel.dsl.ui.contentassist.antlr.internal.InternalSqlDSLParser typedParser = (org.lunifera.metamodel.dsl.ui.contentassist.antlr.internal.InternalSqlDSLParser) parser;
			typedParser.entryRuleSModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SqlDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SqlDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
