/*
* generated by Xtext
*/
grammar InternalSqlDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.lunifera.metamodel.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.lunifera.metamodel.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.lunifera.metamodel.dsl.services.SqlDSLGrammarAccess;

}

@parser::members {

 	private SqlDSLGrammarAccess grammarAccess;
 	
    public InternalSqlDSLParser(TokenStream input, SqlDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SModel";	
   	}
   	
   	@Override
   	protected SqlDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSModel
entryRuleSModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSModelRule()); }
	 iv_ruleSModel=ruleSModel 
	 { $current=$iv_ruleSModel.current; } 
	 EOF 
;

// Rule SModel
ruleSModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSModelAccess().getSettingsSSettingsParserRuleCall_0_0()); 
	    }
		lv_settings_0_0=ruleSSettings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSModelRule());
	        }
       		set(
       			$current, 
       			"settings",
        		lv_settings_0_0, 
        		"SSettings");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSModelAccess().getArtifactSArtifactParserRuleCall_1_0()); 
	    }
		lv_artifact_1_0=ruleSArtifact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSModelRule());
	        }
       		add(
       			$current, 
       			"artifact",
        		lv_artifact_1_0, 
        		"SArtifact");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSSettings
entryRuleSSettings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSSettingsRule()); }
	 iv_ruleSSettings=ruleSSettings 
	 { $current=$iv_ruleSSettings.current; } 
	 EOF 
;

// Rule SSettings
ruleSSettings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSSettingsAccess().getSSettingsAction_0(),
            $current);
    }
)	otherlv_1='settings {' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSSettingsAccess().getSettingsKeyword_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getSSettingsAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSSettingsAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSSettingsAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>(	otherlv_3='schema=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSSettingsAccess().getSchemaKeyword_2_0_0());
    }
(
(
		lv_schema_4_0=RULE_ID
		{
			newLeafNode(lv_schema_4_0, grammarAccess.getSSettingsAccess().getSchemaIDTerminalRuleCall_2_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSSettingsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"schema",
        		lv_schema_4_0, 
        		"ID");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSSettingsAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSSettingsAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSSettingsAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(	otherlv_5='engine=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSSettingsAccess().getEngineKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSSettingsAccess().getEngineSDBEngineEnumRuleCall_2_1_1_0()); 
	    }
		lv_engine_6_0=ruleSDBEngine		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSSettingsRule());
	        }
       		set(
       			$current, 
       			"engine",
        		lv_engine_6_0, 
        		"SDBEngine");
	        afterParserOrEnumRuleCall();
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSSettingsAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getSSettingsAccess().getUnorderedGroup_2());
	}

)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSSettingsAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSArtifact
entryRuleSArtifact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSArtifactRule()); }
	 iv_ruleSArtifact=ruleSArtifact 
	 { $current=$iv_ruleSArtifact.current; } 
	 EOF 
;

// Rule SArtifact
ruleSArtifact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSArtifactAccess().getSTableParserRuleCall_0()); 
    }
    this_STable_0=ruleSTable
    { 
        $current = $this_STable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSArtifactAccess().getSEnumParserRuleCall_1()); 
    }
    this_SEnum_1=ruleSEnum
    { 
        $current = $this_SEnum_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSTable
entryRuleSTable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSTableRule()); }
	 iv_ruleSTable=ruleSTable 
	 { $current=$iv_ruleSTable.current; } 
	 EOF 
;

// Rule STable
ruleSTable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='table' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSTableAccess().getTableKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSTableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSTableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSTableAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='prefix' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSTableAccess().getPrefixKeyword_3_0());
    }
(
(
		lv_prefix_4_0=RULE_ID
		{
			newLeafNode(lv_prefix_4_0, grammarAccess.getSTableAccess().getPrefixIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSTableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_4_0, 
        		"ID");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSTableAccess().getSemicolonKeyword_3_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSTableAccess().getEntityMembersSEntityMemberParserRuleCall_4_0()); 
	    }
		lv_entityMembers_6_0=ruleSEntityMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSTableRule());
	        }
       		add(
       			$current, 
       			"entityMembers",
        		lv_entityMembers_6_0, 
        		"SEntityMember");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSTableAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSEntityMember
entryRuleSEntityMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSEntityMemberRule()); }
	 iv_ruleSEntityMember=ruleSEntityMember 
	 { $current=$iv_ruleSEntityMember.current; } 
	 EOF 
;

// Rule SEntityMember
ruleSEntityMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSEntityMemberAccess().getSPropertyParserRuleCall_0()); 
    }
    this_SProperty_0=ruleSProperty
    { 
        $current = $this_SProperty_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSEntityMemberAccess().getSJoinPropertyParserRuleCall_1()); 
    }
    this_SJoinProperty_1=ruleSJoinProperty
    { 
        $current = $this_SJoinProperty_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSProperty
entryRuleSProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPropertyRule()); }
	 iv_ruleSProperty=ruleSProperty 
	 { $current=$iv_ruleSProperty.current; } 
	 EOF 
;

// Rule SProperty
ruleSProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='column' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSPropertyAccess().getColumnKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSPropertyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSPropertyRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSPropertyAccess().getExtTypeSExtDeclaredSQLTypeCrossReference_2_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSPropertyAccess().getInlinedTypeSInlinedSQLTypeParserRuleCall_2_1_0()); 
	    }
		lv_inlinedType_3_0=ruleSInlinedSQLType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSPropertyRule());
	        }
       		set(
       			$current, 
       			"inlinedType",
        		lv_inlinedType_3_0, 
        		"SInlinedSQLType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSPropertyAccess().getSimpleTypeSSimpleTypesEnumRuleCall_2_2_0()); 
	    }
		lv_simpleType_4_0=ruleSSimpleTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSPropertyRule());
	        }
       		set(
       			$current, 
       			"simpleType",
        		lv_simpleType_4_0, 
        		"SSimpleTypes");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getSPropertyAccess().getPropsSColumnPropsParserRuleCall_3_0()); 
	    }
		lv_props_5_0=ruleSColumnProps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSPropertyRule());
	        }
       		set(
       			$current, 
       			"props",
        		lv_props_5_0, 
        		"SColumnProps");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSPropertyAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSJoinProperty
entryRuleSJoinProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSJoinPropertyRule()); }
	 iv_ruleSJoinProperty=ruleSJoinProperty 
	 { $current=$iv_ruleSJoinProperty.current; } 
	 EOF 
;

// Rule SJoinProperty
ruleSJoinProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='joincolumn' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSJoinPropertyAccess().getJoincolumnKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSJoinPropertyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSJoinPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSJoinPropertyRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSJoinPropertyAccess().getTypeSTableCrossReference_2_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSJoinPropertyAccess().getPropsSColumnPropsParserRuleCall_3_0()); 
	    }
		lv_props_3_0=ruleSColumnProps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSJoinPropertyRule());
	        }
       		set(
       			$current, 
       			"props",
        		lv_props_3_0, 
        		"SColumnProps");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSJoinPropertyAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSColumnProps
entryRuleSColumnProps returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSColumnPropsRule()); }
	 iv_ruleSColumnProps=ruleSColumnProps 
	 { $current=$iv_ruleSColumnProps.current; } 
	 EOF 
;

// Rule SColumnProps
ruleSColumnProps returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSColumnPropsAccess().getSColumnPropsAction_0(),
            $current);
    }
)	otherlv_1='with' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSColumnPropsAccess().getWithKeyword_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>(
(
		lv_nullable_3_0=	'nullable' 
    {
        newLeafNode(lv_nullable_3_0, grammarAccess.getSColumnPropsAccess().getNullableNullableKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSColumnPropsRule());
	        }
       		setWithLastConsumed($current, "nullable", true, "nullable");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(
(
		lv_aes_4_0=	'AES' 
    {
        newLeafNode(lv_aes_4_0, grammarAccess.getSColumnPropsAccess().getAesAESKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSColumnPropsRule());
	        }
       		setWithLastConsumed($current, "aes", true, "AES");
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2(), 2);
	 				}
					({true}?=>(	otherlv_5='index=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSColumnPropsAccess().getIndexKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSColumnPropsAccess().getIndexSIndexEnumRuleCall_2_2_1_0()); 
	    }
		lv_index_6_0=ruleSIndex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSColumnPropsRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_6_0, 
        		"SIndex");
	        afterParserOrEnumRuleCall();
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getSColumnPropsAccess().getUnorderedGroup_2());
	}

))
;







// Entry rule entryRuleSInlinedSQLType
entryRuleSInlinedSQLType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSInlinedSQLTypeRule()); }
	 iv_ruleSInlinedSQLType=ruleSInlinedSQLType 
	 { $current=$iv_ruleSInlinedSQLType.current; } 
	 EOF 
;

// Rule SInlinedSQLType
ruleSInlinedSQLType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSInlinedSQLTypeAccess().getSStringParserRuleCall_0()); 
    }
    this_SString_0=ruleSString
    { 
        $current = $this_SString_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSInlinedSQLTypeAccess().getSDecimalParserRuleCall_1()); 
    }
    this_SDecimal_1=ruleSDecimal
    { 
        $current = $this_SDecimal_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSEnum
entryRuleSEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSEnumRule()); }
	 iv_ruleSEnum=ruleSEnum 
	 { $current=$iv_ruleSEnum.current; } 
	 EOF 
;

// Rule SEnum
ruleSEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSEnumAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSEnumAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSEnumRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSEnumAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSEnumAccess().getLiteralsSEnumLiteralParserRuleCall_3_0()); 
	    }
		lv_literals_3_0=ruleSEnumLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSEnumRule());
	        }
       		add(
       			$current, 
       			"literals",
        		lv_literals_3_0, 
        		"SEnumLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSEnumAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSEnumLiteral
entryRuleSEnumLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSEnumLiteralRule()); }
	 iv_ruleSEnumLiteral=ruleSEnumLiteral 
	 { $current=$iv_ruleSEnumLiteral.current; } 
	 EOF 
;

// Rule SEnumLiteral
ruleSEnumLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSEnumLiteralAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSEnumLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSEnumLiteralAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getSEnumLiteralAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSEnumLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleSString
entryRuleSString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSStringRule()); }
	 iv_ruleSString=ruleSString 
	 { $current=$iv_ruleSString.current; } 
	 EOF 
;

// Rule SString
ruleSString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='String(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSStringAccess().getStringKeyword_0());
    }
(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getSStringAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSStringAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleSDecimal
entryRuleSDecimal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDecimalRule()); }
	 iv_ruleSDecimal=ruleSDecimal 
	 { $current=$iv_ruleSDecimal.current; } 
	 EOF 
;

// Rule SDecimal
ruleSDecimal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Decimal(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSDecimalAccess().getDecimalKeyword_0());
    }
(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getSDecimalAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDecimalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSDecimalAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule SDBEngine
ruleSDBEngine returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='InnoDB' 
	{
        $current = grammarAccess.getSDBEngineAccess().getINNODBEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSDBEngineAccess().getINNODBEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='MyISAM' 
	{
        $current = grammarAccess.getSDBEngineAccess().getMYISAMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSDBEngineAccess().getMYISAMEnumLiteralDeclaration_1()); 
    }
));



// Rule SSimpleTypes
ruleSSimpleTypes returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Int' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSSimpleTypesAccess().getINTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Tinyint' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getTINY_INTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSSimpleTypesAccess().getTINY_INTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Smallint' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getSMALL_INTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSSimpleTypesAccess().getSMALL_INTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Mediumint' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getMEDIUM_INTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getSSimpleTypesAccess().getMEDIUM_INTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Boolean' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getBOOLEANEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getSSimpleTypesAccess().getBOOLEANEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Blob' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getBLOBEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getSSimpleTypesAccess().getBLOBEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Datetime' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getDATETIMEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getSSimpleTypesAccess().getDATETIMEEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Date' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getDATEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getSSimpleTypesAccess().getDATEEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Time' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getTIMEEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getSSimpleTypesAccess().getTIMEEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='Polygon' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getPOLYGONEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getSSimpleTypesAccess().getPOLYGONEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='Point' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getPOINTEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getSSimpleTypesAccess().getPOINTEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='Foto' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getFOTOEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getSSimpleTypesAccess().getFOTOEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='Currency' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getCurrencyEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getSSimpleTypesAccess().getCurrencyEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='Coordinate' 
	{
        $current = grammarAccess.getSSimpleTypesAccess().getCoordinateEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getSSimpleTypesAccess().getCoordinateEnumLiteralDeclaration_13()); 
    }
));



// Rule SIndex
ruleSIndex returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='No' 
	{
        $current = grammarAccess.getSIndexAccess().getNOEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSIndexAccess().getNOEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Yes' 
	{
        $current = grammarAccess.getSIndexAccess().getYESEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSIndexAccess().getYESEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Unique' 
	{
        $current = grammarAccess.getSIndexAccess().getUNIQUEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getSIndexAccess().getUNIQUEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Spatial' 
	{
        $current = grammarAccess.getSIndexAccess().getSPATIALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getSIndexAccess().getSPATIALEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


