/*
* generated by Xtext
*/

package org.lunifera.metamodel.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SqlDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSettingsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSettingsSSettingsParserRuleCall_0_0 = (RuleCall)cSettingsAssignment_0.eContents().get(0);
		private final Assignment cArtifactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArtifactSArtifactParserRuleCall_1_0 = (RuleCall)cArtifactAssignment_1.eContents().get(0);
		
		//SModel:
		//	settings=SSettings? artifact+=SArtifact*;
		public ParserRule getRule() { return rule; }

		//settings=SSettings? artifact+=SArtifact*
		public Group getGroup() { return cGroup; }

		//settings=SSettings?
		public Assignment getSettingsAssignment_0() { return cSettingsAssignment_0; }

		//SSettings
		public RuleCall getSettingsSSettingsParserRuleCall_0_0() { return cSettingsSSettingsParserRuleCall_0_0; }

		//artifact+=SArtifact*
		public Assignment getArtifactAssignment_1() { return cArtifactAssignment_1; }

		//SArtifact
		public RuleCall getArtifactSArtifactParserRuleCall_1_0() { return cArtifactSArtifactParserRuleCall_1_0; }
	}

	public class SSettingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SSettings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSSettingsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSettingsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cSchemaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cSchemaAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSchemaIDTerminalRuleCall_2_0_1_0 = (RuleCall)cSchemaAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cEngineKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEngineAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEngineSDBEngineEnumRuleCall_2_1_1_0 = (RuleCall)cEngineAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SSettings:
		//	{SSettings} "settings {" (("schema=" schema=ID)? & ("engine=" engine=SDBEngine)?) "}";
		public ParserRule getRule() { return rule; }

		//{SSettings} "settings {" (("schema=" schema=ID)? & ("engine=" engine=SDBEngine)?) "}"
		public Group getGroup() { return cGroup; }

		//{SSettings}
		public Action getSSettingsAction_0() { return cSSettingsAction_0; }

		//"settings {"
		public Keyword getSettingsKeyword_1() { return cSettingsKeyword_1; }

		//("schema=" schema=ID)? & ("engine=" engine=SDBEngine)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//("schema=" schema=ID)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"schema="
		public Keyword getSchemaKeyword_2_0_0() { return cSchemaKeyword_2_0_0; }

		//schema=ID
		public Assignment getSchemaAssignment_2_0_1() { return cSchemaAssignment_2_0_1; }

		//ID
		public RuleCall getSchemaIDTerminalRuleCall_2_0_1_0() { return cSchemaIDTerminalRuleCall_2_0_1_0; }

		//("engine=" engine=SDBEngine)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"engine="
		public Keyword getEngineKeyword_2_1_0() { return cEngineKeyword_2_1_0; }

		//engine=SDBEngine
		public Assignment getEngineAssignment_2_1_1() { return cEngineAssignment_2_1_1; }

		//SDBEngine
		public RuleCall getEngineSDBEngineEnumRuleCall_2_1_1_0() { return cEngineSDBEngineEnumRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SArtifact");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SArtifact:
		//	STable | SEnum;
		public ParserRule getRule() { return rule; }

		//STable | SEnum
		public Alternatives getAlternatives() { return cAlternatives; }

		//STable
		public RuleCall getSTableParserRuleCall_0() { return cSTableParserRuleCall_0; }

		//SEnum
		public RuleCall getSEnumParserRuleCall_1() { return cSEnumParserRuleCall_1; }
	}

	public class STableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "STable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cSettingsAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cSettingsSSettingsParserRuleCall_3_0_0 = (RuleCall)cSettingsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cPrefixKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cPrefixAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cPrefixIDTerminalRuleCall_3_1_1_0 = (RuleCall)cPrefixAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cEntityMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntityMembersSEntityMemberParserRuleCall_4_0 = (RuleCall)cEntityMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//STable:
		//	"table" name=ID "{" (settings=SSettings? & ("prefix" prefix=ID ";")?) entityMembers+=SEntityMember* "}";
		public ParserRule getRule() { return rule; }

		//"table" name=ID "{" (settings=SSettings? & ("prefix" prefix=ID ";")?) entityMembers+=SEntityMember* "}"
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//settings=SSettings? & ("prefix" prefix=ID ";")?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//settings=SSettings?
		public Assignment getSettingsAssignment_3_0() { return cSettingsAssignment_3_0; }

		//SSettings
		public RuleCall getSettingsSSettingsParserRuleCall_3_0_0() { return cSettingsSSettingsParserRuleCall_3_0_0; }

		//("prefix" prefix=ID ";")?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"prefix"
		public Keyword getPrefixKeyword_3_1_0() { return cPrefixKeyword_3_1_0; }

		//prefix=ID
		public Assignment getPrefixAssignment_3_1_1() { return cPrefixAssignment_3_1_1; }

		//ID
		public RuleCall getPrefixIDTerminalRuleCall_3_1_1_0() { return cPrefixIDTerminalRuleCall_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_2() { return cSemicolonKeyword_3_1_2; }

		//entityMembers+=SEntityMember*
		public Assignment getEntityMembersAssignment_4() { return cEntityMembersAssignment_4; }

		//SEntityMember
		public RuleCall getEntityMembersSEntityMemberParserRuleCall_4_0() { return cEntityMembersSEntityMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SEntityMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SEntityMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSJoinPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SEntityMember:
		//	SProperty | SJoinProperty;
		public ParserRule getRule() { return rule; }

		//SProperty | SJoinProperty
		public Alternatives getAlternatives() { return cAlternatives; }

		//SProperty
		public RuleCall getSPropertyParserRuleCall_0() { return cSPropertyParserRuleCall_0; }

		//SJoinProperty
		public RuleCall getSJoinPropertyParserRuleCall_1() { return cSJoinPropertyParserRuleCall_1; }
	}

	public class SPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExtTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cExtTypeSExtDeclaredSQLTypeCrossReference_2_0_0 = (CrossReference)cExtTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cExtTypeSExtDeclaredSQLTypeIDTerminalRuleCall_2_0_0_1 = (RuleCall)cExtTypeSExtDeclaredSQLTypeCrossReference_2_0_0.eContents().get(1);
		private final Assignment cInlinedTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInlinedTypeSInlinedSQLTypeParserRuleCall_2_1_0 = (RuleCall)cInlinedTypeAssignment_2_1.eContents().get(0);
		private final Assignment cSimpleTypeAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cSimpleTypeSSimpleTypesEnumRuleCall_2_2_0 = (RuleCall)cSimpleTypeAssignment_2_2.eContents().get(0);
		private final Assignment cPropsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropsSColumnPropsParserRuleCall_3_0 = (RuleCall)cPropsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SProperty:
		//	"column" name=ID (extType=[SExtDeclaredSQLType] | inlinedType=SInlinedSQLType | simpleType=SSimpleTypes)
		//	props=SColumnProps? ";";
		public ParserRule getRule() { return rule; }

		//"column" name=ID (extType=[SExtDeclaredSQLType] | inlinedType=SInlinedSQLType | simpleType=SSimpleTypes)
		//props=SColumnProps? ";"
		public Group getGroup() { return cGroup; }

		//"column"
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//extType=[SExtDeclaredSQLType] | inlinedType=SInlinedSQLType | simpleType=SSimpleTypes
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//extType=[SExtDeclaredSQLType]
		public Assignment getExtTypeAssignment_2_0() { return cExtTypeAssignment_2_0; }

		//[SExtDeclaredSQLType]
		public CrossReference getExtTypeSExtDeclaredSQLTypeCrossReference_2_0_0() { return cExtTypeSExtDeclaredSQLTypeCrossReference_2_0_0; }

		//ID
		public RuleCall getExtTypeSExtDeclaredSQLTypeIDTerminalRuleCall_2_0_0_1() { return cExtTypeSExtDeclaredSQLTypeIDTerminalRuleCall_2_0_0_1; }

		//inlinedType=SInlinedSQLType
		public Assignment getInlinedTypeAssignment_2_1() { return cInlinedTypeAssignment_2_1; }

		//SInlinedSQLType
		public RuleCall getInlinedTypeSInlinedSQLTypeParserRuleCall_2_1_0() { return cInlinedTypeSInlinedSQLTypeParserRuleCall_2_1_0; }

		//simpleType=SSimpleTypes
		public Assignment getSimpleTypeAssignment_2_2() { return cSimpleTypeAssignment_2_2; }

		//SSimpleTypes
		public RuleCall getSimpleTypeSSimpleTypesEnumRuleCall_2_2_0() { return cSimpleTypeSSimpleTypesEnumRuleCall_2_2_0; }

		//props=SColumnProps?
		public Assignment getPropsAssignment_3() { return cPropsAssignment_3; }

		//SColumnProps
		public RuleCall getPropsSColumnPropsParserRuleCall_3_0() { return cPropsSColumnPropsParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SJoinPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SJoinProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoincolumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeSTableCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeSTableIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeSTableCrossReference_2_0.eContents().get(1);
		private final Assignment cPropsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropsSColumnPropsParserRuleCall_3_0 = (RuleCall)cPropsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SJoinProperty:
		//	"joincolumn" name=ID type=[STable] props=SColumnProps? ";";
		public ParserRule getRule() { return rule; }

		//"joincolumn" name=ID type=[STable] props=SColumnProps? ";"
		public Group getGroup() { return cGroup; }

		//"joincolumn"
		public Keyword getJoincolumnKeyword_0() { return cJoincolumnKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=[STable]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[STable]
		public CrossReference getTypeSTableCrossReference_2_0() { return cTypeSTableCrossReference_2_0; }

		//ID
		public RuleCall getTypeSTableIDTerminalRuleCall_2_0_1() { return cTypeSTableIDTerminalRuleCall_2_0_1; }

		//props=SColumnProps?
		public Assignment getPropsAssignment_3() { return cPropsAssignment_3; }

		//SColumnProps
		public RuleCall getPropsSColumnPropsParserRuleCall_3_0() { return cPropsSColumnPropsParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SColumnPropsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SColumnProps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSColumnPropsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cNullableAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cNullableNullableKeyword_2_0_0 = (Keyword)cNullableAssignment_2_0.eContents().get(0);
		private final Assignment cAesAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cAesAESKeyword_2_1_0 = (Keyword)cAesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cIndexKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIndexSIndexEnumRuleCall_2_2_1_0 = (RuleCall)cIndexAssignment_2_2_1.eContents().get(0);
		
		//SColumnProps:
		//	{SColumnProps} "with" (nullable?="nullable"? & aes?="AES"? & ("index=" index=SIndex)?);
		public ParserRule getRule() { return rule; }

		//{SColumnProps} "with" (nullable?="nullable"? & aes?="AES"? & ("index=" index=SIndex)?)
		public Group getGroup() { return cGroup; }

		//{SColumnProps}
		public Action getSColumnPropsAction_0() { return cSColumnPropsAction_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//nullable?="nullable"? & aes?="AES"? & ("index=" index=SIndex)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//nullable?="nullable"?
		public Assignment getNullableAssignment_2_0() { return cNullableAssignment_2_0; }

		//"nullable"
		public Keyword getNullableNullableKeyword_2_0_0() { return cNullableNullableKeyword_2_0_0; }

		//aes?="AES"?
		public Assignment getAesAssignment_2_1() { return cAesAssignment_2_1; }

		//"AES"
		public Keyword getAesAESKeyword_2_1_0() { return cAesAESKeyword_2_1_0; }

		//("index=" index=SIndex)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"index="
		public Keyword getIndexKeyword_2_2_0() { return cIndexKeyword_2_2_0; }

		//index=SIndex
		public Assignment getIndexAssignment_2_2_1() { return cIndexAssignment_2_2_1; }

		//SIndex
		public RuleCall getIndexSIndexEnumRuleCall_2_2_1_0() { return cIndexSIndexEnumRuleCall_2_2_1_0; }
	}

	public class SExtDeclaredSQLTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SExtDeclaredSQLType");
		private final RuleCall cSEnumParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SExtDeclaredSQLType:
		//	SEnum;
		public ParserRule getRule() { return rule; }

		//SEnum
		public RuleCall getSEnumParserRuleCall() { return cSEnumParserRuleCall; }
	}

	public class SInlinedSQLTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SInlinedSQLType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSDecimalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SInlinedSQLType:
		//	SString | SDecimal;
		public ParserRule getRule() { return rule; }

		//SString | SDecimal
		public Alternatives getAlternatives() { return cAlternatives; }

		//SString
		public RuleCall getSStringParserRuleCall_0() { return cSStringParserRuleCall_0; }

		//SDecimal
		public RuleCall getSDecimalParserRuleCall_1() { return cSDecimalParserRuleCall_1; }
	}

	public class SEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsSEnumLiteralParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SEnum:
		//	"enum" name=ID "{" literals+=SEnumLiteral* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" literals+=SEnumLiteral* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//literals+=SEnumLiteral*
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }

		//SEnumLiteral
		public RuleCall getLiteralsSEnumLiteralParserRuleCall_3_0() { return cLiteralsSEnumLiteralParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SEnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SEnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SEnumLiteral:
		//	name=ID "=" value=INT;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=INT
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class SStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SString:
		//	"String(" value=INT ")";
		public ParserRule getRule() { return rule; }

		//"String(" value=INT ")"
		public Group getGroup() { return cGroup; }

		//"String("
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class SDecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDecimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecimalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SDecimal:
		//	"Decimal(" value=INT ")";
		public ParserRule getRule() { return rule; }

		//"Decimal(" value=INT ")"
		public Group getGroup() { return cGroup; }

		//"Decimal("
		public Keyword getDecimalKeyword_0() { return cDecimalKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	public class SDBEngineElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SDBEngine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINNODBEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINNODBInnoDBKeyword_0_0 = (Keyword)cINNODBEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMYISAMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMYISAMMyISAMKeyword_1_0 = (Keyword)cMYISAMEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SDBEngine:
		//	INNODB="InnoDB" | MYISAM="MyISAM";
		public EnumRule getRule() { return rule; }

		//INNODB="InnoDB" | MYISAM="MyISAM"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INNODB="InnoDB"
		public EnumLiteralDeclaration getINNODBEnumLiteralDeclaration_0() { return cINNODBEnumLiteralDeclaration_0; }

		//"InnoDB"
		public Keyword getINNODBInnoDBKeyword_0_0() { return cINNODBInnoDBKeyword_0_0; }

		//MYISAM="MyISAM"
		public EnumLiteralDeclaration getMYISAMEnumLiteralDeclaration_1() { return cMYISAMEnumLiteralDeclaration_1; }

		//"MyISAM"
		public Keyword getMYISAMMyISAMKeyword_1_0() { return cMYISAMMyISAMKeyword_1_0; }
	}

	public class SSimpleTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SSimpleTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTIntKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTINY_INTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTINY_INTTinyintKeyword_1_0 = (Keyword)cTINY_INTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSMALL_INTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSMALL_INTSmallintKeyword_2_0 = (Keyword)cSMALL_INTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIUM_INTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMEDIUM_INTMediumintKeyword_3_0 = (Keyword)cMEDIUM_INTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBOOLEANBooleanKeyword_4_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBLOBEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBLOBBlobKeyword_5_0 = (Keyword)cBLOBEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDATETIMEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDATETIMEDatetimeKeyword_6_0 = (Keyword)cDATETIMEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDATEDateKeyword_7_0 = (Keyword)cDATEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTIMETimeKeyword_8_0 = (Keyword)cTIMEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPOLYGONEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPOLYGONPolygonKeyword_9_0 = (Keyword)cPOLYGONEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPOINTEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPOINTPointKeyword_10_0 = (Keyword)cPOINTEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cFOTOEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cFOTOFotoKeyword_11_0 = (Keyword)cFOTOEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cCurrencyEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cCurrencyCurrencyKeyword_12_0 = (Keyword)cCurrencyEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cCoordinateEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cCoordinateCoordinateKeyword_13_0 = (Keyword)cCoordinateEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum SSimpleTypes:
		//	INT="Int" | TINY_INT="Tinyint" | SMALL_INT="Smallint" | MEDIUM_INT="Mediumint" | BOOLEAN="Boolean" | BLOB="Blob" |
		//	DATETIME="Datetime" | DATE="Date" | TIME="Time" | POLYGON="Polygon" | POINT="Point" | FOTO="Foto" | Currency |
		//	Coordinate;
		public EnumRule getRule() { return rule; }

		//INT="Int" | TINY_INT="Tinyint" | SMALL_INT="Smallint" | MEDIUM_INT="Mediumint" | BOOLEAN="Boolean" | BLOB="Blob" |
		//DATETIME="Datetime" | DATE="Date" | TIME="Time" | POLYGON="Polygon" | POINT="Point" | FOTO="Foto" | Currency |
		//Coordinate
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT="Int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }

		//"Int"
		public Keyword getINTIntKeyword_0_0() { return cINTIntKeyword_0_0; }

		//TINY_INT="Tinyint"
		public EnumLiteralDeclaration getTINY_INTEnumLiteralDeclaration_1() { return cTINY_INTEnumLiteralDeclaration_1; }

		//"Tinyint"
		public Keyword getTINY_INTTinyintKeyword_1_0() { return cTINY_INTTinyintKeyword_1_0; }

		//SMALL_INT="Smallint"
		public EnumLiteralDeclaration getSMALL_INTEnumLiteralDeclaration_2() { return cSMALL_INTEnumLiteralDeclaration_2; }

		//"Smallint"
		public Keyword getSMALL_INTSmallintKeyword_2_0() { return cSMALL_INTSmallintKeyword_2_0; }

		//MEDIUM_INT="Mediumint"
		public EnumLiteralDeclaration getMEDIUM_INTEnumLiteralDeclaration_3() { return cMEDIUM_INTEnumLiteralDeclaration_3; }

		//"Mediumint"
		public Keyword getMEDIUM_INTMediumintKeyword_3_0() { return cMEDIUM_INTMediumintKeyword_3_0; }

		//BOOLEAN="Boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_4() { return cBOOLEANEnumLiteralDeclaration_4; }

		//"Boolean"
		public Keyword getBOOLEANBooleanKeyword_4_0() { return cBOOLEANBooleanKeyword_4_0; }

		//BLOB="Blob"
		public EnumLiteralDeclaration getBLOBEnumLiteralDeclaration_5() { return cBLOBEnumLiteralDeclaration_5; }

		//"Blob"
		public Keyword getBLOBBlobKeyword_5_0() { return cBLOBBlobKeyword_5_0; }

		//DATETIME="Datetime"
		public EnumLiteralDeclaration getDATETIMEEnumLiteralDeclaration_6() { return cDATETIMEEnumLiteralDeclaration_6; }

		//"Datetime"
		public Keyword getDATETIMEDatetimeKeyword_6_0() { return cDATETIMEDatetimeKeyword_6_0; }

		//DATE="Date"
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_7() { return cDATEEnumLiteralDeclaration_7; }

		//"Date"
		public Keyword getDATEDateKeyword_7_0() { return cDATEDateKeyword_7_0; }

		//TIME="Time"
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_8() { return cTIMEEnumLiteralDeclaration_8; }

		//"Time"
		public Keyword getTIMETimeKeyword_8_0() { return cTIMETimeKeyword_8_0; }

		//POLYGON="Polygon"
		public EnumLiteralDeclaration getPOLYGONEnumLiteralDeclaration_9() { return cPOLYGONEnumLiteralDeclaration_9; }

		//"Polygon"
		public Keyword getPOLYGONPolygonKeyword_9_0() { return cPOLYGONPolygonKeyword_9_0; }

		//POINT="Point"
		public EnumLiteralDeclaration getPOINTEnumLiteralDeclaration_10() { return cPOINTEnumLiteralDeclaration_10; }

		//"Point"
		public Keyword getPOINTPointKeyword_10_0() { return cPOINTPointKeyword_10_0; }

		//FOTO="Foto"
		public EnumLiteralDeclaration getFOTOEnumLiteralDeclaration_11() { return cFOTOEnumLiteralDeclaration_11; }

		//"Foto"
		public Keyword getFOTOFotoKeyword_11_0() { return cFOTOFotoKeyword_11_0; }

		//Currency
		public EnumLiteralDeclaration getCurrencyEnumLiteralDeclaration_12() { return cCurrencyEnumLiteralDeclaration_12; }

		//"Currency"
		public Keyword getCurrencyCurrencyKeyword_12_0() { return cCurrencyCurrencyKeyword_12_0; }

		//Coordinate
		public EnumLiteralDeclaration getCoordinateEnumLiteralDeclaration_13() { return cCoordinateEnumLiteralDeclaration_13; }

		//"Coordinate"
		public Keyword getCoordinateCoordinateKeyword_13_0() { return cCoordinateCoordinateKeyword_13_0; }
	}

	public class SIndexElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SIndex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONoKeyword_0_0 = (Keyword)cNOEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cYESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cYESYesKeyword_1_0 = (Keyword)cYESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNIQUEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNIQUEUniqueKeyword_2_0 = (Keyword)cUNIQUEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSPATIALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSPATIALSpatialKeyword_3_0 = (Keyword)cSPATIALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SIndex:
		//	NO="No" | YES="Yes" | UNIQUE="Unique" | SPATIAL="Spatial";
		public EnumRule getRule() { return rule; }

		//NO="No" | YES="Yes" | UNIQUE="Unique" | SPATIAL="Spatial"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NO="No"
		public EnumLiteralDeclaration getNOEnumLiteralDeclaration_0() { return cNOEnumLiteralDeclaration_0; }

		//"No"
		public Keyword getNONoKeyword_0_0() { return cNONoKeyword_0_0; }

		//YES="Yes"
		public EnumLiteralDeclaration getYESEnumLiteralDeclaration_1() { return cYESEnumLiteralDeclaration_1; }

		//"Yes"
		public Keyword getYESYesKeyword_1_0() { return cYESYesKeyword_1_0; }

		//UNIQUE="Unique"
		public EnumLiteralDeclaration getUNIQUEEnumLiteralDeclaration_2() { return cUNIQUEEnumLiteralDeclaration_2; }

		//"Unique"
		public Keyword getUNIQUEUniqueKeyword_2_0() { return cUNIQUEUniqueKeyword_2_0; }

		//SPATIAL="Spatial"
		public EnumLiteralDeclaration getSPATIALEnumLiteralDeclaration_3() { return cSPATIALEnumLiteralDeclaration_3; }

		//"Spatial"
		public Keyword getSPATIALSpatialKeyword_3_0() { return cSPATIALSpatialKeyword_3_0; }
	}
	
	private SModelElements pSModel;
	private SSettingsElements pSSettings;
	private SDBEngineElements unknownRuleSDBEngine;
	private SArtifactElements pSArtifact;
	private STableElements pSTable;
	private SEntityMemberElements pSEntityMember;
	private SPropertyElements pSProperty;
	private SJoinPropertyElements pSJoinProperty;
	private SColumnPropsElements pSColumnProps;
	private SExtDeclaredSQLTypeElements pSExtDeclaredSQLType;
	private SInlinedSQLTypeElements pSInlinedSQLType;
	private SSimpleTypesElements unknownRuleSSimpleTypes;
	private SIndexElements unknownRuleSIndex;
	private SEnumElements pSEnum;
	private SEnumLiteralElements pSEnumLiteral;
	private SStringElements pSString;
	private SDecimalElements pSDecimal;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.metamodel.dsl.SqlDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SModel:
	//	settings=SSettings? artifact+=SArtifact*;
	public SModelElements getSModelAccess() {
		return (pSModel != null) ? pSModel : (pSModel = new SModelElements());
	}
	
	public ParserRule getSModelRule() {
		return getSModelAccess().getRule();
	}

	//SSettings:
	//	{SSettings} "settings {" (("schema=" schema=ID)? & ("engine=" engine=SDBEngine)?) "}";
	public SSettingsElements getSSettingsAccess() {
		return (pSSettings != null) ? pSSettings : (pSSettings = new SSettingsElements());
	}
	
	public ParserRule getSSettingsRule() {
		return getSSettingsAccess().getRule();
	}

	//enum SDBEngine:
	//	INNODB="InnoDB" | MYISAM="MyISAM";
	public SDBEngineElements getSDBEngineAccess() {
		return (unknownRuleSDBEngine != null) ? unknownRuleSDBEngine : (unknownRuleSDBEngine = new SDBEngineElements());
	}
	
	public EnumRule getSDBEngineRule() {
		return getSDBEngineAccess().getRule();
	}

	//SArtifact:
	//	STable | SEnum;
	public SArtifactElements getSArtifactAccess() {
		return (pSArtifact != null) ? pSArtifact : (pSArtifact = new SArtifactElements());
	}
	
	public ParserRule getSArtifactRule() {
		return getSArtifactAccess().getRule();
	}

	//STable:
	//	"table" name=ID "{" (settings=SSettings? & ("prefix" prefix=ID ";")?) entityMembers+=SEntityMember* "}";
	public STableElements getSTableAccess() {
		return (pSTable != null) ? pSTable : (pSTable = new STableElements());
	}
	
	public ParserRule getSTableRule() {
		return getSTableAccess().getRule();
	}

	//SEntityMember:
	//	SProperty | SJoinProperty;
	public SEntityMemberElements getSEntityMemberAccess() {
		return (pSEntityMember != null) ? pSEntityMember : (pSEntityMember = new SEntityMemberElements());
	}
	
	public ParserRule getSEntityMemberRule() {
		return getSEntityMemberAccess().getRule();
	}

	//SProperty:
	//	"column" name=ID (extType=[SExtDeclaredSQLType] | inlinedType=SInlinedSQLType | simpleType=SSimpleTypes)
	//	props=SColumnProps? ";";
	public SPropertyElements getSPropertyAccess() {
		return (pSProperty != null) ? pSProperty : (pSProperty = new SPropertyElements());
	}
	
	public ParserRule getSPropertyRule() {
		return getSPropertyAccess().getRule();
	}

	//SJoinProperty:
	//	"joincolumn" name=ID type=[STable] props=SColumnProps? ";";
	public SJoinPropertyElements getSJoinPropertyAccess() {
		return (pSJoinProperty != null) ? pSJoinProperty : (pSJoinProperty = new SJoinPropertyElements());
	}
	
	public ParserRule getSJoinPropertyRule() {
		return getSJoinPropertyAccess().getRule();
	}

	//SColumnProps:
	//	{SColumnProps} "with" (nullable?="nullable"? & aes?="AES"? & ("index=" index=SIndex)?);
	public SColumnPropsElements getSColumnPropsAccess() {
		return (pSColumnProps != null) ? pSColumnProps : (pSColumnProps = new SColumnPropsElements());
	}
	
	public ParserRule getSColumnPropsRule() {
		return getSColumnPropsAccess().getRule();
	}

	//SExtDeclaredSQLType:
	//	SEnum;
	public SExtDeclaredSQLTypeElements getSExtDeclaredSQLTypeAccess() {
		return (pSExtDeclaredSQLType != null) ? pSExtDeclaredSQLType : (pSExtDeclaredSQLType = new SExtDeclaredSQLTypeElements());
	}
	
	public ParserRule getSExtDeclaredSQLTypeRule() {
		return getSExtDeclaredSQLTypeAccess().getRule();
	}

	//SInlinedSQLType:
	//	SString | SDecimal;
	public SInlinedSQLTypeElements getSInlinedSQLTypeAccess() {
		return (pSInlinedSQLType != null) ? pSInlinedSQLType : (pSInlinedSQLType = new SInlinedSQLTypeElements());
	}
	
	public ParserRule getSInlinedSQLTypeRule() {
		return getSInlinedSQLTypeAccess().getRule();
	}

	//enum SSimpleTypes:
	//	INT="Int" | TINY_INT="Tinyint" | SMALL_INT="Smallint" | MEDIUM_INT="Mediumint" | BOOLEAN="Boolean" | BLOB="Blob" |
	//	DATETIME="Datetime" | DATE="Date" | TIME="Time" | POLYGON="Polygon" | POINT="Point" | FOTO="Foto" | Currency |
	//	Coordinate;
	public SSimpleTypesElements getSSimpleTypesAccess() {
		return (unknownRuleSSimpleTypes != null) ? unknownRuleSSimpleTypes : (unknownRuleSSimpleTypes = new SSimpleTypesElements());
	}
	
	public EnumRule getSSimpleTypesRule() {
		return getSSimpleTypesAccess().getRule();
	}

	//enum SIndex:
	//	NO="No" | YES="Yes" | UNIQUE="Unique" | SPATIAL="Spatial";
	public SIndexElements getSIndexAccess() {
		return (unknownRuleSIndex != null) ? unknownRuleSIndex : (unknownRuleSIndex = new SIndexElements());
	}
	
	public EnumRule getSIndexRule() {
		return getSIndexAccess().getRule();
	}

	//SEnum:
	//	"enum" name=ID "{" literals+=SEnumLiteral* "}";
	public SEnumElements getSEnumAccess() {
		return (pSEnum != null) ? pSEnum : (pSEnum = new SEnumElements());
	}
	
	public ParserRule getSEnumRule() {
		return getSEnumAccess().getRule();
	}

	//SEnumLiteral:
	//	name=ID "=" value=INT;
	public SEnumLiteralElements getSEnumLiteralAccess() {
		return (pSEnumLiteral != null) ? pSEnumLiteral : (pSEnumLiteral = new SEnumLiteralElements());
	}
	
	public ParserRule getSEnumLiteralRule() {
		return getSEnumLiteralAccess().getRule();
	}

	//SString:
	//	"String(" value=INT ")";
	public SStringElements getSStringAccess() {
		return (pSString != null) ? pSString : (pSString = new SStringElements());
	}
	
	public ParserRule getSStringRule() {
		return getSStringAccess().getRule();
	}

	//SDecimal:
	//	"Decimal(" value=INT ")";
	public SDecimalElements getSDecimalAccess() {
		return (pSDecimal != null) ? pSDecimal : (pSDecimal = new SDecimalElements());
	}
	
	public ParserRule getSDecimalRule() {
		return getSDecimalAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
