/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext
 * 
 * Contributors:
 * 		Florian Pirchner - Initial implementation
 */
package org.lunifera.metamodel.dsl.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.xbase.lib.IterableExtensions
import org.lunifera.metamodel.dsl.sqlDSL.SEnum
import org.lunifera.metamodel.dsl.sqlDSL.SModel
import org.lunifera.metamodel.dsl.sqlDSL.STable
import org.lunifera.metamodel.dsl.sqlDSL.SJoinColumn
import org.lunifera.metamodel.dsl.sqlDSL.SColumn
import org.lunifera.metamodel.dsl.sql.valueconverter.QualifiedNameProvider

class XcoreGenerator implements IGenerator {
	
	@Inject extension IterableExtensions
	@Inject extension HelperExtensions
	@Inject extension QualifiedNameProvider
	
	private int indexLeft
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(model : resource.allContents.filter(typeof(SModel)).toIterable){
		var String generatedFile =	model.generatedFile.toLowerCase;
			fsa.generateFile(generatedFile.concat(".xcore"), model.generate);
		}
	}
	
	def dispatch generate(SModel model)'''
		package «model.settings.toJavaPackageString»
		
		import org.eclipse.emf.ecore.*
		
		«generateAnnotations»
		
		«FOR table : model.artifact.filter(typeof(STable))»
		«table.generate»
		«ENDFOR»
		
		«FOR xenum : model.artifact.filter(typeof(SEnum))»
		«xenum.generate»
		«ENDFOR»
	'''

	def dispatch generate(SEnum  xenum)'''
		enum «xenum.toJavaEnumString» {
			«FOR literal : xenum.literals»
				«literal.name.toUpperCase» = «literal.value»
			«ENDFOR»
		}
	'''
	
	def generateAnnotations()'''
		annotation "L_2" as L_2
		annotation "L_3" as L_3
		annotation "L_5" as L_5
		annotation "L_6" as L_6
		annotation "L_10" as L_10
		annotation "L_14" as L_14
		annotation "L_15" as L_15
		annotation "L_20" as L_20
		annotation "L_24" as L_24
		annotation "L_25" as L_25
		annotation "L_30" as L_30
		annotation "L_50" as L_50
		annotation "L_75" as L_75
		annotation "L_100" as L_100
		annotation "L_125" as L_125
		annotation "L_200" as L_200
		annotation "L_250" as L_250
		annotation "L_500" as L_500
		annotation "L_1000" as L_1000
		annotation "L_2000" as L_2000
		
		annotation "AES_ENCRYPT" as AES_ENCRYPT
		annotation "DBSchema" as DBSchema
		annotation "DBTable" as DBTable
		annotation "DBCol" as DBCol
		annotation "DBColPrefix" as DBColPrefix
		annotation "DB_INDEXED" as DB_INDEXED
		annotation "NotNull" as NotNull
		annotation "ReadOnly" as ReadOnly
	'''
	
	def dispatch generate(STable  table)'''
		«table.toAnnotations»
		class «table.entityname.toFirstUpper» {
			«FOR column : table.columns»«column.generate»«ENDFOR»
		}
	'''
	
	def dispatch generate(SJoinColumn  joinColumn)'''
		«joinColumn.toAnnotations»
		refers «joinColumn.referencedType.toFQNJavaEntityString» «joinColumn.props.javacolumn»
	'''
	
	def dispatch generate(SColumn  column)'''
		«column.toAnnotations»
		«column.toJavaType» «column.toJavaPropertyName»
	'''
}
